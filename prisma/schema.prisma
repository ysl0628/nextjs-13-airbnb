// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 如果下方程式碼為全白的，必須下載 prisma 外掛程式才能使用

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  // 以下為 user 對 accout, listing, reservation 一對多關聯
  // 一個 User 可以有多個 Listing，很多個 Reservation
  accouts      Account[]
  listings     Listing[]
  reservations Reservation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String // 這個欄位是為了讓使用者可以登入後，可以保持登入狀態
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  // 以下為關聯，可以在資料庫中找到關聯的資料
  // onDelete: Cascade 代表當 User 被刪除時，會連帶刪除 Account
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 以下為聯合索引，可以讓資料庫快速找到資料
  @@unique([provider, providerAccountId])
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  bedCount      Int
  locationValue String
  userId        String   @db.ObjectId
  price         Int

  // 以下為關聯，可以在資料庫中找到關聯的資料
  // onDelete: Cascade 代表當 User 被刪除時，會連帶刪除 Listing
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  // userName    String
  // email       String
  // address     String?
  // phone       Int?
  // arrivalTime String
  // isMainGuest Boolean?
  // mainGuest   String?
  createdAt  DateTime @default(now())

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
